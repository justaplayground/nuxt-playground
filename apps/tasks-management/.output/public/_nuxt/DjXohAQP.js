import{d as g,r as w,o as k,F as v,y as p,z as u,G as b,A as n,E as _,H as D,I as x,J as y,K as L,L as T,M as B,x as I,g as M,B as S,N as C,O as E,C as N,P as O}from"./ve0dH64z.js";const U={class:"w-72"},$={key:1,class:"bg-white border border-gray-200 rounded-lg p-3 shadow-sm"},V={class:"flex items-center gap-2"},j=["disabled"],z=g({__name:"AddListForm",emits:["addList"],setup(e,{emit:t}){const s=t,d=w(!1),a=w(""),o=w(),h=()=>{d.value=!0,T(()=>{o.value?.focus()})},l=()=>{d.value=!1,a.value=""},i=()=>{a.value.trim()&&(s("addList",a.value.trim()),a.value="",d.value=!1)},r=c=>{c.key==="Escape"&&d.value&&l()};return k(()=>{document.addEventListener("keydown",r)}),v(()=>{document.removeEventListener("keydown",r)}),(c,f)=>(u(),p("div",U,[b(d)?(u(),p("div",$,[n("form",{onSubmit:L(i,["prevent"]),class:"space-y-3"},[D(n("input",{ref_key:"titleInput",ref:o,"onUpdate:modelValue":f[0]||(f[0]=m=>y(a)?a.value=m:null),type:"text",placeholder:"Enter list title...",required:"",class:"w-full px-3 py-2 border border-gray-200 rounded focus:outline-none focus:ring-1 focus:ring-emerald-500 focus:border-emerald-500 text-sm"},null,512),[[x,b(a)]]),n("div",V,[n("button",{type:"submit",class:"px-3 py-1.5 bg-emerald-600 text-white rounded text-sm hover:bg-emerald-700 focus:outline-none focus:ring-1 focus:ring-emerald-500 transition-colors",disabled:!b(a).trim()}," Add List ",8,j),n("button",{type:"button",class:"px-3 py-1.5 text-gray-500 hover:text-gray-700 hover:bg-gray-50 rounded text-sm transition-colors",onClick:l}," Cancel ")])],32)])):(u(),p("button",{key:0,class:"w-full p-3 bg-white border border-gray-200 hover:border-gray-300 text-gray-600 rounded-lg transition-colors flex items-center justify-center gap-2 text-sm hover:bg-gray-50",onClick:h},[...f[1]||(f[1]=[n("svg",{class:"w-5 h-5",fill:"currentColor",viewBox:"0 0 20 20"},[n("path",{"fill-rule":"evenodd",d:"M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z","clip-rule":"evenodd"})],-1),_(" Add another list ",-1)])]))]))}}),F=Object.assign(z,{__name:"AddListForm"}),A="tama-board",H=B("board",{state:()=>({board:null}),getters:{getBoardTitle:e=>e.board?.title||"Loading...",getLists:e=>e.board?.lists||[],getListById:e=>t=>e.board?.lists.find(s=>s.id===t),getTaskById:e=>(t,s)=>e.board?.lists.find(a=>a.id===t)?.tasks.find(a=>a.id===s)},actions:{initializeBoard(){const e={id:"board-1",title:"My TaMa Board",lists:[{id:"list-1",title:"To Do",tasks:[{id:"task-1",title:"Welcome to TaMa!",description:"This is your first task. You can edit, delete, or drag it around.",createdAt:new Date,updatedAt:new Date},{id:"task-2",title:"Add more tasks",description:"Click the + button to add more tasks to your lists.",createdAt:new Date,updatedAt:new Date}],createdAt:new Date,updatedAt:new Date},{id:"list-2",title:"In Progress",tasks:[],createdAt:new Date,updatedAt:new Date},{id:"list-3",title:"Done",tasks:[],createdAt:new Date,updatedAt:new Date}],createdAt:new Date,updatedAt:new Date};this.board=e,this.saveBoard()},loadBoard(){{const e=localStorage.getItem(A);if(e)try{const t=JSON.parse(e);t.createdAt=new Date(t.createdAt),t.updatedAt=new Date(t.updatedAt),t.lists=t.lists.map(s=>({...s,createdAt:new Date(s.createdAt),updatedAt:new Date(s.updatedAt),tasks:s.tasks.map(d=>({...d,createdAt:new Date(d.createdAt),updatedAt:new Date(d.updatedAt)}))})),this.board=t}catch(t){console.error("Error parsing stored board:",t),this.initializeBoard()}else this.initializeBoard()}},saveBoard(){this.board&&localStorage.setItem(A,JSON.stringify(this.board))},addTask(e,t,s){if(!this.board)return;const d=this.board.lists.find(o=>o.id===e);if(!d)return;const a={id:`task-${Date.now()}`,title:t,description:s,createdAt:new Date,updatedAt:new Date};d.tasks.push(a),d.updatedAt=new Date,this.board.updatedAt=new Date,this.saveBoard()},updateTask(e,t,s){if(!this.board)return;const d=this.board.lists.find(o=>o.id===e);if(!d)return;const a=d.tasks.find(o=>o.id===t);a&&(Object.assign(a,s,{updatedAt:new Date}),d.updatedAt=new Date,this.board.updatedAt=new Date,this.saveBoard())},deleteTask(e,t){if(!this.board)return;const s=this.board.lists.find(a=>a.id===e);if(!s)return;const d=s.tasks.findIndex(a=>a.id===t);d!==-1&&(s.tasks.splice(d,1),s.updatedAt=new Date,this.board.updatedAt=new Date,this.saveBoard())},moveTask(e,t,s,d){if(!this.board)return;const a=this.board.lists.find(i=>i.id===t),o=this.board.lists.find(i=>i.id===s);if(!a||!o)return;const h=a.tasks.findIndex(i=>i.id===e);if(h===-1)return;const[l]=a.tasks.splice(h,1);l&&(l.updatedAt=new Date,o.tasks.splice(d,0,l),a.updatedAt=new Date,o.updatedAt=new Date,this.board.updatedAt=new Date,this.saveBoard())},addList(e){if(!this.board)return;const t={id:`list-${Date.now()}`,title:e,tasks:[],createdAt:new Date,updatedAt:new Date};this.board.lists.push(t),this.board.updatedAt=new Date,this.saveBoard()},updateList(e,t){if(!this.board)return;const s=this.board.lists.find(d=>d.id===e);s&&(Object.assign(s,t,{updatedAt:new Date}),this.board.updatedAt=new Date,this.saveBoard())},deleteList(e){if(!this.board)return;const t=this.board.lists.findIndex(s=>s.id===e);t!==-1&&(this.board.lists.splice(t,1),this.board.updatedAt=new Date,this.saveBoard())}}}),J={class:"min-h-screen bg-gray-50"},K={class:"bg-white border-b border-gray-200 px-6 py-4"},G={class:"max-w-full"},P={class:"text-xl font-semibold text-gray-900"},R={class:"p-4"},Y={class:"max-w-full"},q={key:0,class:"flex gap-4 overflow-x-auto pb-4 custom-scrollbar"},W={class:"flex-shrink-0"},Q={key:1,class:"flex items-center justify-center h-64"},Z=g({__name:"index",setup(e){const t=H();k(()=>{t.loadBoard()});const s=(i,r,c)=>{t.addTask(i,r,c)},d=(i,r,c)=>{t.updateTask(i,r,c)},a=(i,r)=>{t.deleteTask(i,r)},o=i=>{t.addList(i)},h=(i,r)=>{t.updateList(i,r)},l=i=>{t.deleteList(i)};return I({title:"TaMa - Task Management",meta:[{name:"description",content:"A modern ClickUp clone built with Nuxt v4.0, Vue 3, and Tailwind CSS"}]}),(i,r)=>{const c=M("TaMaList"),f=F;return u(),p("div",J,[n("header",K,[n("div",G,[n("h1",P,S(b(t).getBoardTitle),1)])]),n("main",R,[n("div",Y,[b(t).board?(u(),p("div",q,[(u(!0),p(C,null,E(b(t).getLists,m=>(u(),O(c,{key:m.id,list:m,onAddTask:s,onUpdateTask:d,onDeleteTask:a,onUpdateList:h,onDeleteList:l},null,8,["list"]))),128)),n("div",W,[N(f,{onAddList:o})])])):(u(),p("div",Q,[...r[0]||(r[0]=[n("div",{class:"text-white text-lg"},"Loading board...",-1)])]))])])])}}});export{Z as default};
